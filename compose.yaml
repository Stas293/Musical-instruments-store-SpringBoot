services:
  mongodb:
    image: 'mongo:latest'
    environment:
      - 'MONGO_INITDB_DATABASE=mydatabase'
      - 'MONGO_INITDB_ROOT_PASSWORD=secret'
      - 'MONGO_INITDB_ROOT_USERNAME=root'
    ports:
      - '27017:27017'
    volumes:
      - 'mongo-data:/data/db'

  postgres:
    image: 'postgres:latest'
    environment:
      - 'POSTGRES_PASSWORD=secret'
      - 'POSTGRES_USER=myuser'
    ports:
      - '5432:5432'
    volumes:
      - 'postgres-data:/var/lib/postgresql/data'
      - './init-databases.sql:/docker-entrypoint-initdb.d/init-databases.sql'

  kafka:
    image: bitnami/kafka:latest
    hostname: kafka_b
    container_name: kafka
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      # - KAFKA_KRAFT_CLUSTER_ID=228f04bc-0895-11ee-be56-0242ac120002
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://127.0.0.1:9092,EXTERNAL://kafka_b:9094
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@127.0.0.1:9093
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
      # - BITNAMI_DEBUG=yes
#      - KAFKA_CFG_NUM_PARTITIONS=2
    ports:
      - "9092:9092"
      - "9094:9094"
    volumes:
      - kafka-data:/bitnami

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    depends_on:
      - kafka
    ports:
      - "8081:8080"
    environment:
      DYNAMIC_CONFIG_ENABLED: 'true'
      # LOGGING_LEVEL_ROOT: 'DEBUG'
#    volumes:
#      - /c/tools/kafka/kui/config.yml:/etc/kafkaui/dynamic_config.yaml

  schema-registry:
    image: confluentinc/cp-schema-registry:latest
    hostname: schema-registry
    depends_on:
      - kafka
    ports:
      - "8082:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka_b:9094,PLAINTEXT_INTERNAL://localhost:29092
      # SCHEMA_REGISTRY_DEBUG: 'true'

  loki:
    image: grafana/loki:main
    container_name: loki
    command: [ "-config.file=/etc/loki/local-config.yaml" ]
    ports:
      - "3100:3100"

#  prometheus:
#    image: prom/prometheus:v2.46.0
#    container_name: prometheus
#    command:
#      - --enable-feature=exemplar-storage
#      - --config.file=/etc/prometheus/prometheus.yml
#    volumes:
#      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
#    ports:
#      - "9090:9090"
#
#  tempo:
#    image: grafana/tempo:2.2.2
#    container_name: tempo
#    command: [ "-config.file=/etc/tempo.yaml" ]
#    volumes:
#      - ./docker/tempo/tempo.yml:/etc/tempo.yaml:ro
#      - ./data/tempo:/tmp/tempo
#    ports:
#      - "3110:3100"  # Tempo
#      - "9411:9411" # zipkin
#
#  grafana:
#    image: grafana/grafana:10.1.0
#    container_name: grafana
#    volumes:
#      - ./docker/grafana:/etc/grafana/provisioning/datasources:ro
#    environment:
#      - GF_AUTH_ANONYMOUS_ENABLED=true
#      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
#      - GF_AUTH_DISABLE_LOGIN_FORM=true
#    ports:
#      - "3000:3000"

  discovery-server:
    container_name: discovery-server
    ports:
      - "8761:8761"
    build:
      context: ./discovery-server
      dockerfile: Dockerfile
    depends_on:
      - loki

  api-gateway:
    container_name: api-gateway
    ports:
      - "8080:8080"
    expose:
      - "8080"
    environment:
      - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY= TRACE
    depends_on:
      - discovery-server
      - loki
    build:
      context: ./api-gateway
      dockerfile: Dockerfile

  auth-service:
    container_name: auth-service
    depends_on:
      - postgres
      - discovery-server
      - api-gateway
      - loki
    build:
      context: ./auth-service
      dockerfile: Dockerfile

  history-order-service:
    container_name: history-order-service
    depends_on:
      - mongodb
      - loki
      - discovery-server
      - api-gateway
    build:
      context: ./history-order-service
      dockerfile: Dockerfile

  instrument-service:
    container_name: instrument-service
    depends_on:
      - mongodb
      - loki
      - discovery-server
      - api-gateway
      - inventory-service
    build:
      context: ./instrument-service
      dockerfile: Dockerfile

  inventory-service:
    container_name: inventory-service
    depends_on:
      - postgres
      - loki
      - discovery-server
      - api-gateway
    build:
      context: ./inventory-service
      dockerfile: Dockerfile

  notification-service:
    container_name: notification-service
    depends_on:
      - loki
      - kafka
      - schema-registry
      - discovery-server
      - api-gateway
    build:
      context: ./notification-service
      dockerfile: Dockerfile

  order-service:
    container_name: order-service
    depends_on:
      - loki
      - postgres
      - kafka
      - schema-registry
      - discovery-server
      - api-gateway
      - notification-service
    build:
      context: ./order-service
      dockerfile: Dockerfile

volumes:
  kafka-data:
  postgres-data:
  mongo-data:
